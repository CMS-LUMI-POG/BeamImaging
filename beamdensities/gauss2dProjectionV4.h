/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef GAUSS2DPROJECTIONV4
#define GAUSS2DPROJECTIONV4

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "TF2.h"
class gauss2dProjectionV4 : public RooAbsPdf {
public:
  gauss2dProjectionV4() {} ; 
  gauss2dProjectionV4(const char *name, const char *title,
	      RooAbsReal& _x,
	      RooAbsReal& _y,
	      RooAbsReal& _n1,
	      RooAbsReal& _x_Width1,
	      RooAbsReal& _y_Width1,
	      RooAbsReal& _rho1,
	      RooAbsReal& _n2,
	      RooAbsReal& _x_Width2,
	      RooAbsReal& _y_Width2,
	      RooAbsReal& _rho2);
  gauss2dProjectionV4(const gauss2dProjectionV4& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new gauss2dProjectionV4(*this,newname); }
  TF2 *twodGauss = new TF2("twodGauss","exp(-0.5*((x[0])/[0])^2-0.5*TMath::Power(((x[1])/[1]),2)-2*[2]*(x[0])*(x[1])/([0]*[1]))",-31,31,-31,31);
  TF2 *twodGaussProj = new TF2("twodGaussProj","exp(-0.5*((x[0])/[0])^2-0.5*TMath::Power(((x[1])/[1]),2)-2*[2]*(x[0])*(x[1])/([0]*[1]))",-31,31,-31,31);
  TF2 *vtxResolution = new TF2("vtxResolution","exp(-0.5*((x[0])/0.7)^2-0.5*TMath::Power(((x[1])/0.7),2))",-31,31,-31,31);
  double projectTF2(double ix, double iy)const {
    return (twodGaussProj->Integral(ix,ix+0.00000001,-15,15));
  }
  double epsilon = 0.1;
  inline virtual ~gauss2dProjectionV4() { }

protected:

  RooRealProxy x ;
  RooRealProxy y ;
  RooRealProxy n1 ;
  RooRealProxy x_Width1 ;
  RooRealProxy y_Width1 ;
  RooRealProxy rho1 ;
  RooRealProxy n2 ;
  RooRealProxy x_Width2 ;
  RooRealProxy y_Width2 ;
  RooRealProxy rho2 ;
  
  Double_t evaluate() const ;

private:

  ClassDef(gauss2dProjectionV4,1) // Your description goes here...
};
 
#endif
