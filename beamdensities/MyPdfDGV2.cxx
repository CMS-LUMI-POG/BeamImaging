/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "MyPdfDGV2.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "TMatrixDSym.h"

ClassImp(MyPdfDGV2) 

 MyPdfDGV2::MyPdfDGV2(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _y,
                        RooAbsReal& _weight1,
                        RooAbsReal& _rhoN1,
                        RooAbsReal& _x_widthN1,
                        RooAbsReal& _y_widthN1,
                        RooAbsReal& _rhoW1,
                        RooAbsReal& _x_widthW1,
                        RooAbsReal& _y_widthW1,
                        RooAbsReal& _weight2,
                        RooAbsReal& _rhoN2,
                        RooAbsReal& _x_widthN2,
                        RooAbsReal& _y_widthN2,
                        RooAbsReal& _rhoW2,
                        RooAbsReal& _x_widthW2,
                        RooAbsReal& _y_widthW2) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   y("y","y",this,_y),
   weight1("weight1","weight1",this,_weight1),
   rhoN1("rhoN1","rhoN1",this,_rhoN1),
   x_widthN1("x_widthN1","x_widthN1",this,_x_widthN1),
   y_widthN1("y_widthN1","y_widthN1",this,_y_widthN1),
   rhoW1("rhoW1","rhoW1",this,_rhoW1),
   x_widthW1("x_widthW1","x_widthW1",this,_x_widthW1),
   y_widthW1("y_widthW1","y_widthW1",this,_y_widthW1),
   weight2("weight2","weight2",this,_weight2),
   rhoN2("rhoN2","rhoN2",this,_rhoN2),
   x_widthN2("x_widthN2","x_widthN2",this,_x_widthN2),
   y_widthN2("y_widthN2","y_widthN2",this,_y_widthN2),
   rhoW2("rhoW2","rhoW2",this,_rhoW2),
   x_widthW2("x_widthW2","x_widthW2",this,_x_widthW2),
   y_widthW2("y_widthW2","y_widthW2",this,_y_widthW2)
 { 
 } 


 MyPdfDGV2::MyPdfDGV2(const MyPdfDGV2& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   y("y",this,other.y),
   weight1("weight1",this,other.weight1),
   rhoN1("rhoN1",this,other.rhoN1),
   x_widthN1("x_widthN1",this,other.x_widthN1),
   y_widthN1("y_widthN1",this,other.y_widthN1),
   rhoW1("rhoW1",this,other.rhoW1),
   x_widthW1("x_widthW1",this,other.x_widthW1),
   y_widthW1("y_widthW1",this,other.y_widthW1),
   weight2("weight2",this,other.weight2),
   rhoN2("rhoN2",this,other.rhoN2),
   x_widthN2("x_widthN2",this,other.x_widthN2),
   y_widthN2("y_widthN2",this,other.y_widthN2),
   rhoW2("rhoW2",this,other.rhoW2),
   x_widthW2("x_widthW2",this,other.x_widthW2),
   y_widthW2("y_widthW2",this,other.y_widthW2)
 { 
 } 



 Double_t MyPdfDGV2::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 



   TMatrixDSym beamN1(2);
   TMatrixDSym beamW1(2);
    beamN1(0,0) = TMath::Power(x_widthN1,2.0); 
    beamN1(1,1) = TMath::Power(y_widthN1,2.0); 
    beamN1(1,0) = rhoN1*x_widthN1*y_widthN1;
    beamN1(0,1) = rhoN1*x_widthN1*y_widthN1;
    beamW1(0,0) = TMath::Power(x_widthW1,2.0); 
    beamW1(1,1) = TMath::Power(y_widthW1,2.0); 
    beamW1(1,0) = rhoW1*x_widthW1*y_widthW1;
    beamW1(0,1) = rhoW1*x_widthW1*y_widthW1;
    TMatrixDSym beamW1_Inv = beamW1.Invert();
    TMatrixDSym beamN1_Inv = beamN1.Invert();
    TMatrixDSym beamN2MargInv(2);
    TMatrixDSym beamW2MargInv(2);
    beamN2MargInv(0,0) = 1./TMath::Power(x_widthN2,2.0);
    beamN2MargInv(1,1) = 0.;
    beamN2MargInv(0,1) = 0.;
    beamN2MargInv(1,0) = 0.;
    beamW2MargInv(0,0) = 1./TMath::Power(x_widthW2,2.0);
    beamW2MargInv(1,1) = 0.;
    beamW2MargInv(0,1) = 0.;
    beamW2MargInv(1,0) = 0.;
    TMatrixDSym beamN2MargInv2 =  beamN2MargInv;
    TMatrixDSym beamW2MargInv2 =  beamW2MargInv;
    TMatrixDSym vtxRes(2);
    vtxRes(0,0) = 0.49;
    vtxRes(1,1) = 0.49;
    vtxRes(0,1) = 0.;
    vtxRes(1,0) = 0.;
    TMatrixDSym vtxRes2 = vtxRes;
    TMatrixDSym vtxRes3 = vtxRes;
    TMatrixDSym vtxRes4 = vtxRes;
    TMatrixDSym sigmaN1N2FinalInv(2);
    TMatrixDSym sigmaN1W2FinalInv(2);
    TMatrixDSym sigmaW1N2FinalInv(2);
    TMatrixDSym sigmaW1W2FinalInv(2);
    sigmaN1N2FinalInv = ((beamN1_Inv+beamN2MargInv).Invert()+vtxRes).Invert();
    sigmaN1W2FinalInv = ((beamN1_Inv+beamW2MargInv).Invert()+vtxRes2).Invert();
    sigmaW1N2FinalInv = ((beamW1_Inv+beamN2MargInv2).Invert()+vtxRes3).Invert();
    sigmaW1W2FinalInv = ((beamW1_Inv+beamW2MargInv2).Invert()+vtxRes4).Invert();

    fitFuncN1N2->SetParameter(0,sigmaN1N2FinalInv(0,0));
    fitFuncN1N2->SetParameter(1,sigmaN1N2FinalInv(1,1));
    fitFuncN1N2->SetParameter(2,sigmaN1N2FinalInv(1,0));
    fitFuncN1N2->SetParameter(3,sigmaN1N2FinalInv.Invert().Determinant());
    fitFuncN1N2->SetParameter(4,weight1*weight2);

    fitFuncN1W2->SetParameter(0,sigmaN1W2FinalInv(0,0));
    fitFuncN1W2->SetParameter(1,sigmaN1W2FinalInv(1,1));
    fitFuncN1W2->SetParameter(2,sigmaN1W2FinalInv(1,0));
    fitFuncN1W2->SetParameter(3,sigmaN1W2FinalInv.Invert().Determinant());
    fitFuncN1W2->SetParameter(4,weight1*(1.-weight2));

    fitFuncW1N2->SetParameter(0,sigmaW1N2FinalInv(0,0));
    fitFuncW1N2->SetParameter(1,sigmaW1N2FinalInv(1,1));
    fitFuncW1N2->SetParameter(2,sigmaW1N2FinalInv(1,0));
    fitFuncW1N2->SetParameter(3,sigmaW1N2FinalInv.Invert().Determinant());
    fitFuncW1N2->SetParameter(4,weight2*(1.-weight1));

    fitFuncW1W2->SetParameter(0,sigmaW1W2FinalInv(0,0));
    fitFuncW1W2->SetParameter(1,sigmaW1W2FinalInv(1,1));
    fitFuncW1W2->SetParameter(2,sigmaW1W2FinalInv(1,0));
    fitFuncW1W2->SetParameter(3,sigmaW1W2FinalInv.Invert().Determinant());
    fitFuncW1W2->SetParameter(4,(1.-weight2)*(1.-weight1));

    double combVal = (fitFuncN1N2->Eval(x,y)) + (fitFuncN1W2->Eval(x,y)) + (fitFuncW1N2->Eval(x,y)) + (fitFuncW1W2->Eval(x,y));

   return combVal; 
   
 } 



