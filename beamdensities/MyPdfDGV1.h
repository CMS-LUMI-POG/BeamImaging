/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef MYPDFDGV1
#define MYPDFDGV1

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "TF2.h"
#include "TMatrixDSym.h"
 
class MyPdfDGV1 : public RooAbsPdf {
public:
  MyPdfDGV1() {} ; 
  MyPdfDGV1(const char *name, const char *title,
	      RooAbsReal& _x,
	      RooAbsReal& _y,
	      RooAbsReal& _weight1,
	      RooAbsReal& _rhoN1,
	      RooAbsReal& _x_widthN1,
	      RooAbsReal& _y_widthN1,
	      RooAbsReal& _rhoW1,
	      RooAbsReal& _x_widthW1,
	      RooAbsReal& _y_widthW1,
	      RooAbsReal& _weight2,
	      RooAbsReal& _rhoN2,
	      RooAbsReal& _x_widthN2,
	      RooAbsReal& _y_widthN2,
	      RooAbsReal& _rhoW2,
	      RooAbsReal& _x_widthW2,
	      RooAbsReal& _y_widthW2);
  MyPdfDGV1(const MyPdfDGV1& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new MyPdfDGV1(*this,newname); }
  inline virtual ~MyPdfDGV1() { }

protected:

  RooRealProxy x ;
  RooRealProxy y ;
  RooRealProxy weight1 ;
  RooRealProxy rhoN1 ;
  RooRealProxy x_widthN1 ;
  RooRealProxy y_widthN1 ;
  RooRealProxy rhoW1 ;
  RooRealProxy x_widthW1 ;
  RooRealProxy y_widthW1 ;
  RooRealProxy weight2 ;
  RooRealProxy rhoN2 ;
  RooRealProxy x_widthN2 ;
  RooRealProxy y_widthN2 ;
  RooRealProxy rhoW2 ;
  RooRealProxy x_widthW2 ;
  RooRealProxy y_widthW2 ;

  TF2 *fitFuncN1N2 = new TF2("fitFuncN1N2","[4]*100./(TMath::Sqrt([3]*2*3.142))*TMath::Exp(-0.5*(TMath::Power(x[0],2.0)*[0]+TMath::Power(x[1],2.0)*[1]+2*[2]*x[0]*x[1]))",-15,15,-15,15);
  TF2 *fitFuncN1W2 = new TF2("fitFuncN1W2","[4]*100./(TMath::Sqrt([3]*2*3.142))*TMath::Exp(-0.5*(TMath::Power(x[0],2.0)*[0]+TMath::Power(x[1],2.0)*[1]+2*[2]*x[0]*x[1]))",-15,15,-15,15);
  TF2 *fitFuncW1N2 = new TF2("fitFuncW1N2","[4]*100./(TMath::Sqrt([3]*2*3.142))*TMath::Exp(-0.5*(TMath::Power(x[0],2.0)*[0]+TMath::Power(x[1],2.0)*[1]+2*[2]*x[0]*x[1]))",-15,15,-15,15);
  TF2 *fitFuncW1W2 = new TF2("fitFuncW1W2","[4]*100./(TMath::Sqrt([3]*2*3.142))*TMath::Exp(-0.5*(TMath::Power(x[0],2.0)*[0]+TMath::Power(x[1],2.0)*[1]+2*[2]*x[0]*x[1]))",-15,15,-15,15);
  
  TMatrixDSym const vtxRes ;
  
    
  Double_t evaluate() const ;

private:

  ClassDef(MyPdfDGV1,1) // Your description goes here...
};
 
#endif
